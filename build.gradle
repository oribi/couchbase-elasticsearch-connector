plugins {
  id "com.github.jk1.dependency-license-report" version "1.11"
  id 'org.unbroken-dome.test-sets' version '1.5.1'
}

import org.apache.tools.ant.filters.ReplaceTokens
import com.github.jk1.license.importer.XmlReportImporter

apply plugin: 'java'
apply plugin: 'application'

repositories {
  mavenCentral()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  //jcenter() // for testcontainers release candidate
  //maven { url 'https://jitpack.io' } // for testcontainers snapshot
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "4.2.1-SNAPSHOT"

// https://github.com/unbroken-dome/gradle-testsets-plugin
testSets {
  integrationTest
}

integrationTest {
  minHeapSize = "128m"
  maxHeapSize = "512m"
  jvmArgs '-verbose:gc', '-XX:+HeapDumpOnOutOfMemoryError'
}

tasks.withType(Test) {
  testLogging.showStandardStreams = true
}

integrationTest.dependsOn(test)

task exhaustiveTest(group: "Verification", description: "Runs the integration tests against *all* supported server versions") {
  doLast {
    tasks.withType(Test) {
      systemProperty 'com.couchbase.integrationTest.exhaustive', 'true'
    }
  }
  finalizedBy integrationTest
}

dependencies {
  implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.2'

  // Elasticsearch High Level REST client uses commons-logging.
  // Route that through SLF4J instead.
  implementation 'org.slf4j:jcl-over-slf4j:1.7.25'

  implementation 'com.couchbase.client:java-client:2.7.9'
  implementation 'com.couchbase.client:dcp-client:0.25.0-SNAPSHOT'
  implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:6.7.1'

  implementation 'io.projectreactor:reactor-core:3.2.9.RELEASE'
  //implementation 'io.projectreactor.addons:reactor-extra:3.2.2.RELEASE'

  implementation 'com.orbitz.consul:consul-client:1.3.3'
  implementation 'com.github.therapi:therapi-json-rpc:0.4.0'

  implementation 'io.dropwizard.metrics:metrics-json:4.1.0'
  implementation 'io.dropwizard.metrics:metrics-jvm:4.1.0'

  implementation 'com.google.guava:guava:27.1-jre'
  implementation 'org.apache.commons:commons-text:1.6'
  implementation 'net.consensys.cava:cava-toml:0.3.1'
  implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'
  implementation 'info.picocli:picocli:3.9.6'

  implementation 'com.amazonaws:aws-java-sdk-core:1.11.642'

  testImplementation 'junit:junit:4.12'
  testImplementation 'org.apache.commons:commons-lang3:3.9'
  testImplementation("org.assertj:assertj-core:3.11.1")
  integrationTestImplementation 'com.jayway.jsonpath:json-path:2.4.0'

  def testcontainersVersion = '1.10.1'
  integrationTestImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
  integrationTestImplementation "org.testcontainers:couchbase:${testcontainersVersion}"
  //def testcontainersCommit = 'ac05988143e8d433d' // avoid port conflicts between multiple Couchbase containers on same host
  //integrationTestImplementation "com.github.testcontainers.testcontainers-java:testcontainers:${testcontainersCommit}"
  //integrationTestImplementation "com.github.testcontainers.testcontainers-java:couchbase:${testcontainersCommit}"

  compileOnly 'org.immutables:value:2.7.5'
  annotationProcessor 'org.immutables:value:2.7.5'
}

configurations.all {
  exclude group: 'commons-logging' // using jcl-over-slf4j instead
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // always update snapshots instead of waiting 24 hrs
}

// The "aws-request-signing-apache-interceptor" dependency is included in source form
// because it's not published to a public repo. Include it in the dependency report.
licenseReport {
  importers = [new XmlReportImporter('Additional dependencies', file("additional-license-info.xml"))]
}

// Prohibit snapshot dependencies unless we're building a snapshot
build.doFirst {
  if (!version.endsWith("SNAPSHOT")) {
    project.configurations.compile.each {
      if (it.toString().contains("SNAPSHOT")) {
        throw new Exception("Can't release with SNAPSHOT dependency: " + it)
      }
    }
  }
}

// IntelliJ doesn't play nice with classes generated by annotation processors.
// This dirty workaround aligns Gradle with IDEA's default behavior so we can use org.immutables.
// Assumes IDEA is storing generated sources relative to the module content root,
// using the default directory name of "generated"
ext.generatedFilesDir = file('src/main/generated')
compileJava.options.annotationProcessorGeneratedSourcesDirectory = generatedFilesDir
sourceSets.main.java.srcDirs += generatedFilesDir
clean {
  delete generatedFilesDir
}

tasks.withType(Tar) {
  compression = Compression.GZIP
}

// Patch the start scripts to export the APP_HOME environment variable
// so we can read log4j config and write log files in usual location.
// See https://discuss.gradle.org/t/linux-launcher-script-should-export-app-home-before-starting-the-application/3570
tasks.withType(CreateStartScripts) {
  doLast {
    unixScript.text = unixScript.text.replace('exec', 'export APP_HOME; exec')
    // Apparently the Windows launcher already exposes the variable (NOT VERIFIED)

    // tidy up the class path, yeah? Maybe add $APP_HOME/lib-ext as well?
    unixScript.text = unixScript.text.replaceAll('CLASSPATH=.*', 'CLASSPATH=\\$APP_HOME/lib/*')
    //windowsScript.text = windowsScript.text.replaceAll('CLASSPATH=.*', 'CLASSPATH=%APP_HOME%\\\\lib\\\\*')
  }
}

mainClassName = "com.couchbase.connector.elasticsearch.ElasticsearchConnector"
applicationDefaultJvmArgs = ['-Dcom.couchbase.client.deps.io.netty.leakDetection.level=advanced',
                            '-Dcom.couchbase.client.deps.io.netty.noPreferDirect=true',
                            '-Xmx4096m',
                            '-server']

startScripts {
  applicationName = 'cbes'
}

def extraStartScripts = [
    'cbes-checkpoint-backup' : 'com.couchbase.connector.elasticsearch.cli.CheckpointBackup',
    'cbes-checkpoint-restore': 'com.couchbase.connector.elasticsearch.cli.CheckpointRestore',
    'cbes-checkpoint-clear'  : 'com.couchbase.connector.elasticsearch.cli.CheckpointClear',
    'cbes-consul'            : 'com.couchbase.connector.elasticsearch.cli.ConsulCli'
]

extraStartScripts.each { scriptName, driverClass ->
  task(scriptName + "-script", group: 'CLI Script Generation', type: CreateStartScripts) {
    mainClassName = driverClass
    applicationName = scriptName
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
  }
}

// include the additional start scripts in the distribution
applicationDistribution.into("bin") {
  from(tasks.withType(CreateStartScripts))
  fileMode = 0755
}

applicationDistribution.into("notices") {
  // https://github.com/jk1/Gradle-License-Report
  from(generateLicenseReport)
}

def getGitInfo = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'describe', '--tags', '--dirty', '--always'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

def gitInfo = getGitInfo()

//if (gitInfo.contains("dirty")) {
//    println "WARNING: workspace is dirty"
//}

processResources {
  inputs.property("version", project.property("version"))
  inputs.property("gitInfo", gitInfo)

  filteringCharset = 'UTF-8'
  filesMatching('**/*.properties') {
    filter ReplaceTokens, tokens: [
        "application.version": project.property("version"),
        "git.info"           : gitInfo
    ]
  }
}
